
1. В SQL ограничения на запрос можно задать при помощи ключевого слова "where"
   select * from film where rental_rate = 4.99;
   в данном выражении знак "=" является логическим оператором

2. 
   оператор строго больше: ">"
   оператор строго меньше: "<"
   оператор больше или равно: ">="
   оператор меньше или равно: "<="
   оператор равно: "="
   оператор не равно: "!="
   оператор не равно: "<>"
   
   только для строк: "like"
   только для строк: "not like"

   в основном для NULL: "is"
   в основно для NULL: "is not"

   для вхождение в диапазон: "between ... and ... "

   для нескольких значений: "in (..,..,..) "
        

3.
   числа с числами
   строки со строками
   даты   с датами
  
   В SQL можно сравнивать разные типы данных тогда происходит не явное приведение
   типов. Такие сравнения лучше избегать

4.
   Логический оператор может вернуть три значения:
   TRUE            истина
   FALSE           лож
   NULL            пусто
   в колонках они будут записаны так:
   [v]  -- истина
   []   -- лож
   [NULL] -- пусто

5. Строки сравниваются между сабой по символьно
   Сначала первый символ строки с лева сравнивается с первым символом строки
   справа если они равны зачем второй и так далее, как только один символ
   станет больше другого или строки равны, проверка прекрашается и вычетается результат сравнения

6. Для дат, чисел и строк можно задавать диапозон на вхождения значения в данный
   диапозон
   Диапозон задаётся припомоши ключевого слова "between" и "and"

   Примеры:
   select 5 between 4 and 10,    -- [v] - это означает что данное выражение "истино"
       5 between 5 and 15,       -- [v]
       5 between 6 and 10,       -- []  - это означает что данное выражение "ложное"
       'f' between 'f' and 'z',   --[v] 
       '2020-20-12' between '2020' and '2022';  --[v]

   select *
   from rental
   where rental_date between '2005-05-26' and '2005-05-28';

7. Когда дата записана в формате год-мес-день в виде строки PostgreSQL неявно переобразовывает
   такие строки в дату, но обочно переобразовывают строку в дату явно используют при этом функциию.

8. Что-бы проверить входить ли одна строка в другую строку исользуется оператор "like"
   Оператор "like" сравнивает на вхождения в строку так называемого шаблона
   SELECT 'new string' like '%string%'b  -- [v]
   после оператора "like" идёт так называемый шаблон '%string%'
   где '%' означает любое количество символов от нуля до заданой строки в шаблоне

   Если просто надо стравнит две строки то используется операторы >,>=,<=,<,<>,!=,=
   SELECT 'new string' like 'new string' -- [v] 

   Можно использовать и шаблон
   SELECT 'new string' like '%new string%' -- [v] но в данном примере можно обойтись и стандартными операторами

   Вот как можно применят шаблоны:
   SELECT 'new string' like '%string%'     -- [v] даный шаблон удовлитворяет условия

   Для проверки на вхождения шаблона в конец строки:
   SELECT 'new string' like '%string'      -- [v]  ишет слово 'string' в конце шаблона

   Для проверки на вхождения шаблона в начало строки:
   SELECT 'new string' like 'string%'      -- [] ЛОЖ так как шаблон сравнивается с началом строки

9. В шаблонах знак "_" означает ровно один люлой символ 
   "%" Означает любое количество символов включая и пробел от 0 до ...

    SELECT 'кот' like 'к_т'   -- [v]
    SELECT 'кит' like 'к_т'   -- [v]

10. Чтобы выбрать все строки которые невходят в шаблон исиользуетя оператор
    SELECT * FROM film 
    WHERE description not like '%Epic%';

11. Что-бы найти пустые значение используетя оператор 'is'
    select *
    from address 
    where address2 is null;

12. Что-бы исключит все пустые значения использовать оператор 'is not null'.

13. SELECT 10 IN (1,2,5,10)  -- [v]  число "10" сравнивается с значениями которые заданы в скобках
    SELECT 10 IN (1,2,5,7)   -- [ ] 
    SELECT 'string 3' IN ('string 1','string 3')  --[v] 
    SELECT 'string 3' IN ('string 1', 'string 2') --[ ]

14 Для комбинование операций есть три оператора:
   AND
   OR
   NOT
   при выполнения запроса с несколькоми операторами снасчала  
   приверяется все NOT 
   затем все       AND
   замем все       OR

16. --1
    SELECT *
    FROM film
    WHERE (NOT) (rental_duration = 7);      в данном примере задано два оператора или два запроса первый 'renatal_duratio = 7' 
                                            а второй 'NOT'


    SELECT *
    FROM film
    WHERE (renatal_duration <> 7);          в данном примере задан один оперетор или один запрос 'rental_duration <> 7'
                                               PostgreSQL автомотически автомотизирует данный код и это запросы
                                               будут выполнять одинаковое количество операций
    --2
    SELECT *
    FROM film
    WHERE (description not like '%Epic%');   в данном примере задан один запрос

    SELECT *
    FROM film
    WHERE (NOT) (desctiption like '%Epic%');   а в этом уже два запроса два оператора
                                               PostgreSQL автомотически автомотизирует данный код и это запросы
                                               будут выполнять одинаковое количество операций

16. SELECT *
    FROM film f
    WHERE 
	  rental_duration in (6,7)
          and rental_rate > 1
          and title like 'P%';


   


    



   














     
  




























