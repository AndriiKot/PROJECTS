
1.

function validationValue(item) {
  if (item < 0) throw 'Negative price';
  return item;
}

try {
  console.log(validationValue(item1));
  console.log(validationValue(item2)); 
} catch (e) {
  console.error(e)
}


2.В премери ниже 'else' лишний так как 'thow' делает возврат и код ниже в данном коде небудет исполненно
  и управление перейдет в блок try {} catch (e) {}

  if (item.price < 0 ) throw 'Negative price'
  else amount += item.price;

  // or

  if (item.price < 0 ) {
    throw 'Negative price'
  } else {
    amount += item.price;
  }


3. При вычислении лочического выражение запись ниже бемысленна

  // some code ...

  if (item.price > 0) return true;
    return false

  // some code ...

  Эти строчки кода можно заменить на одну

  // some code ...

     return item.price > 0

  // some code ...


4. В данном коде ниже выражение order[groupName] вычесляется всякий раз когда происходит к ниму обращение

  // some code ...

  if (order[groupName] && order[groupName].length > 0) {
     total += calculateTotal(order[groupName]);
     count += order[groupName].length;
  }

   // some code ...

   Пример ниже улучшения кода 
   Блогодоря промежуточным переменым

  // some code ...

  const goods = order[groupName];
  if (goods && goods.length > 0) {
    total += calculateTotal(goods);
    count += goods.lenght;
  }

  // some code ...

  or

  // some code ...

  const goods = order[groupName];
  if (goods)
     const len = goods.length;
     if (len > 0) {
        total += calculateTotal(goods);
        count += len;
     }
  }

  // some code ...

  or

  // some code ...

  const goods = order[groupName];
  if (!goods) return;
  const len = goods.length;
  if (len > 0) {
    total += calculateTotal(goods);
    count += len;
  }

  // some code ...

5.
   условие ? значение : значение

  amount += item.price < 0 ? 0 : item.price;
  amount += item.price > 0 ? item.price : 0;

  


































  



  


